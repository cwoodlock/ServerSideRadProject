package com.ships.controllers;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.ships.model.OrderInfo;
import com.ships.model.Ship;
import com.ships.model.ShippingCompany;
import com.ships.services.OrderInfoService;
import com.ships.services.ShipService;
import com.ships.services.ShippingCompanyService;

public class OrderController {
	
	//These are beans that will be used to handle data
	@Autowired 
	private OrderInfoService orderInfoService;;
	
	@Autowired 
	private ShipService shipService;
	
	@Autowired 
	private ShippingCompanyService shippingCompanyService;
	
	//Method to display table
	@RequestMapping(value = "/showOrders", method=RequestMethod.GET)
	public String listOrders(Model model) {
		
		List<OrderInfo> orderInfos = orderInfoService.findAll();	
		model.addAttribute("orderInfos", orderInfos);			

		return "showOrderInfo";
	}
	
	@RequestMapping(value = "/createOrder", method=RequestMethod.GET)
	public String createOrderGET(Model model) {

		//Map id to the balance and the name
		Map<Integer, String> shippingCompanyList = ShipCompanyList();
		model.addAttribute("shippingCompanyList", shippingCompanyList);
		
		//Map the id to the cost and the name
		Map<Integer, String> shipList = ShipList(); 			
		model.addAttribute("shipList", shipList);		
		
		//Create new order
		OrderInfo orderInfo = new OrderInfo();										
		model.addAttribute("orderInfo", orderInfo);		
		
		return "addOrderInfo";
	}

	private Map<Integer, String> ShipList() {
		//Get list of all ships
		ArrayList<Ship> ships = (ArrayList<Ship>) shipService.findAll();
		
		//Create list of ships
		Map<Integer,String>shipList = new HashMap<Integer,String>();
				
		//Getname and cost for each id
		for (Ship c : ships) {
			shipList.put(c.getSid(), c.getName() + "; " + c.getCost().toString());
		}	

		return shipList;
	}

	private Map<Integer, String> ShipCompanyList() {
		//Get list of all shipping companies
		ArrayList<ShippingCompany> shippingCompanies = (ArrayList<ShippingCompany>) shippingCompanyService.findAll();
		
		//Create list of shipping companies
		Map<Integer,String> shippingCompanyList = new HashMap<Integer,String>();
				
		//get name and  balance for each id
		for (ShippingCompany c : shippingCompanies) {
			shippingCompanyList.put(c.getScid(), c.getName() + "; " + c.getBalance().toString());
		}

		return shippingCompanyList;
	}
	
	@RequestMapping(value = "/createOrder", method=RequestMethod.POST)
	public String addOrderPOST(@Valid @ModelAttribute("orderInfo") OrderInfo orderInfo, BindingResult result, Model model) {
		
		boolean isBalanceSmaller;
		
		BigDecimal shipCost = orderInfo.getShip().getCost();				
		BigDecimal shipCompanyBalance = orderInfo.getShippingCompany().getBalance();

		
		int comp = shipCost.compareTo(shipCompanyBalance); 															

		if(comp == 1){
			
			isBalanceSmaller = true;	
		}
		else{
			
			isBalanceSmaller = false;
		}	
		
		
		if (result.hasErrors()){
			
			return "emptyInput";
		} else if(isBalanceSmaller){
			
			return "balanceCostComparison";
		} else {
			
			orderInfoService.save(orderInfo);											
			List<OrderInfo> orderInfos = orderInfoService.findAll();					
			model.addAttribute("orderInfos", orderInfos);								
			
			return "showOrderInfo";
		}

	}
	

}
